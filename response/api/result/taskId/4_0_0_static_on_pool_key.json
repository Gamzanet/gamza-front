{
  "task_id": "f839eee9-fe72-4624-a6c6-48c625d2e9f0",
  "status": "Success",
  "result": {
    "timeHash": "8e11082f202573659f76d5cad74523f503e58f1b97b0341b303acb1f3b89d4e7",
    "hooks": "0x7d61d057dD982b8B0A05a5871C7d40f8b96dd040",
    "result": {
      "info": {
        "chain_name": "unichain",
        "evm_version": "cancun",
        "data": {
          "file_name": "TakeProfitsHook",
          "license": "UNLICENSED",
          "solc_version": "0.8.0",
          "imports": [
            "{BaseHook} from \"v4-periphery/src/base/hooks/BaseHook.sol\"",
            "{ERC1155} from \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\"",
            "{IPoolManager} from \"v4-core/interfaces/IPoolManager.sol\"",
            "{Hooks} from \"v4-core/libraries/Hooks.sol\"",
            "{PoolId, PoolIdLibrary} from \"v4-core/types/PoolId.sol\"",
            "{PoolKey} from \"v4-core/types/PoolKey.sol\"",
            "{Currency, CurrencyLibrary} from \"v4-core/types/Currency.sol\"",
            "{StateLibrary} from \"v4-core/libraries/StateLibrary.sol\"",
            "{IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"",
            "{TickMath} from \"v4-core/libraries/TickMath.sol\"",
            "{BalanceDelta} from \"v4-core/types/BalanceDelta.sol\"",
            "{FixedPointMathLib} from \"solmate/src/utils/FixedPointMathLib.sol\""
          ],
          "contract_scope": {
            "name": "TakeProfitsHook",
            "variable": [
              {
                "name": "lastTicks",
                "signature": "TakeProfitsHook",
                "type": "mapping(PoolId poolId => int24 lastTick)",
                "location": "storage",
                "visibility": "public",
                "scope": "storage",
                "mutability": "mutable"
              },
              {
                "name": "pendingOrders",
                "signature": "TakeProfitsHook",
                "type": "mapping(PoolId poolId => mapping(int24 tickToSellAt => mapping(bool zeroForOne => uint256 inputAmount)))",
                "location": "storage",
                "visibility": "public",
                "scope": "storage",
                "mutability": "mutable"
              },
              {
                "name": "claimableOutputTokens",
                "signature": "TakeProfitsHook",
                "type": "mapping(uint256 positionId => uint256 outputClaimable)",
                "location": "storage",
                "visibility": "public",
                "scope": "storage",
                "mutability": "mutable"
              },
              {
                "name": "claimTokensSupply",
                "signature": "TakeProfitsHook",
                "type": "mapping(uint256 positionId => uint256 claimsSupply)",
                "location": "storage",
                "visibility": "public",
                "scope": "storage",
                "mutability": "mutable"
              },
              {
                "name": "InvalidOrder()",
                "signature": "TakeProfitsHook",
                "type": "error",
                "location": "storage",
                "visibility": "internal",
                "scope": "storage",
                "mutability": "mutable"
              },
              {
                "name": "NotEnoughToClaim()",
                "signature": "TakeProfitsHook",
                "type": "error",
                "location": "storage",
                "visibility": "internal",
                "scope": "storage",
                "mutability": "mutable"
              }
            ],
            "functions": [
              "getHookPermissions",
              "afterInitialize",
              "afterSwap",
              "placeOrder",
              "cancelOrder",
              "redeem",
              "tryExecutingOrders",
              "executeOrder",
              "swapAndSettleBalances",
              "_settle",
              "_take",
              "getPositionId",
              "getLowerUsableTick"
            ],
            "libraries": [
              "StateLibrary",
              "PoolIdLibrary",
              "CurrencyLibrary",
              "FixedPointMathLib"
            ]
          },
          "function_scopes": [
            {
              "name": "getHookPermissions",
              "variable": [],
              "parameters": [],
              "purity": "pure",
              "visibility": "public",
              "payable": false,
              "override": true,
              "modifier": [],
              "returns": [],
              "body": "{\n        return Hooks.Permissions({\n            beforeInitialize: false,\n            afterInitialize: true,\n            beforeAddLiquidity: false,\n            afterAddLiquidity: false,\n            beforeRemoveLiquidity: false,\n            afterRemoveLiquidity: false,\n            beforeSwap: false,\n            afterSwap: true,\n            beforeDonate: false,\n            afterDonate: false,\n            beforeSwapReturnDelta: false,\n            afterSwapReturnDelta: false,\n            afterAddLiquidityReturnDelta: false,\n            afterRemoveLiquidityReturnDelta: false\n        });\n    }",
              "access_control": []
            },
            {
              "name": "afterInitialize",
              "variable": [
                {
                  "name": "key",
                  "signature": "TakeProfitsHook:afterInitialize",
                  "type": "PoolKey",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "tick",
                  "signature": "TakeProfitsHook:afterInitialize",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "parameters": [
                {
                  "name": "key",
                  "signature": "TakeProfitsHook:afterInitialize",
                  "type": "PoolKey",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "tick",
                  "signature": "TakeProfitsHook:afterInitialize",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "purity": null,
              "visibility": "external",
              "payable": false,
              "override": true,
              "modifier": ["onlyByPoolManager"],
              "returns": [],
              "body": "{\n        lastTicks[key.toId()] = tick;\n        return this.afterInitialize.selector;\n    }",
              "access_control": []
            },
            {
              "name": "afterSwap",
              "variable": [
                {
                  "name": "key",
                  "signature": "TakeProfitsHook:afterSwap",
                  "type": "PoolKey",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "sender",
                  "signature": "TakeProfitsHook:afterSwap",
                  "type": "address",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "params",
                  "signature": "TakeProfitsHook:afterSwap",
                  "type": "IPoolManager.SwapParams",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "currentTick",
                  "signature": "TakeProfitsHook:afterSwap",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "function",
                  "mutability": "mutable"
                }
              ],
              "parameters": [
                {
                  "name": "key",
                  "signature": "TakeProfitsHook:afterSwap",
                  "type": "PoolKey",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "sender",
                  "signature": "TakeProfitsHook:afterSwap",
                  "type": "address",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "params",
                  "signature": "TakeProfitsHook:afterSwap",
                  "type": "IPoolManager.SwapParams",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                }
              ],
              "purity": null,
              "visibility": "external",
              "payable": false,
              "override": true,
              "modifier": ["onlyByPoolManager"],
              "returns": [],
              "body": "{\n        if (sender == address(this)) return (this.afterSwap.selector, 0);\n\n        bool tryMore = true;\n        int24 currentTick;\n\n        while (tryMore) {\n            (tryMore, currentTick) = tryExecutingOrders(key, !params.zeroForOne);\n        }\n\n        lastTicks[key.toId()] = currentTick;\n        return (this.afterSwap.selector, 0);\n    }",
              "access_control": []
            },
            {
              "name": "placeOrder",
              "variable": [
                {
                  "name": "key",
                  "signature": "TakeProfitsHook:placeOrder",
                  "type": "PoolKey",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "tickToSellAt",
                  "signature": "TakeProfitsHook:placeOrder",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "zeroForOne",
                  "signature": "TakeProfitsHook:placeOrder",
                  "type": "bool",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "inputAmount",
                  "signature": "TakeProfitsHook:placeOrder",
                  "type": "uint256",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "parameters": [
                {
                  "name": "key",
                  "signature": "TakeProfitsHook:placeOrder",
                  "type": "PoolKey",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "tickToSellAt",
                  "signature": "TakeProfitsHook:placeOrder",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "zeroForOne",
                  "signature": "TakeProfitsHook:placeOrder",
                  "type": "bool",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "inputAmount",
                  "signature": "TakeProfitsHook:placeOrder",
                  "type": "uint256",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "purity": null,
              "visibility": "external",
              "payable": false,
              "override": false,
              "modifier": [],
              "returns": [],
              "body": "{\n        int24 tick = getLowerUsableTick(tickToSellAt, key.tickSpacing);\n        pendingOrders[key.toId()][tick][zeroForOne] += inputAmount;\n\n        uint256 positionId = getPositionId(key, tick, zeroForOne);\n        claimTokensSupply[positionId] += inputAmount;\n        _mint(msg.sender, positionId, inputAmount, \"\");\n\n        address sellToken = zeroForOne ? Currency.unwrap(key.currency0) : Currency.unwrap(key.currency1);\n        IERC20(sellToken).transferFrom(msg.sender, address(this), inputAmount);\n\n        return tick;\n    }",
              "access_control": []
            },
            {
              "name": "cancelOrder",
              "variable": [
                {
                  "name": "key",
                  "signature": "TakeProfitsHook:cancelOrder",
                  "type": "PoolKey",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "tickToSellAt",
                  "signature": "TakeProfitsHook:cancelOrder",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "zeroForOne",
                  "signature": "TakeProfitsHook:cancelOrder",
                  "type": "bool",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "parameters": [
                {
                  "name": "key",
                  "signature": "TakeProfitsHook:cancelOrder",
                  "type": "PoolKey",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "tickToSellAt",
                  "signature": "TakeProfitsHook:cancelOrder",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "zeroForOne",
                  "signature": "TakeProfitsHook:cancelOrder",
                  "type": "bool",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "purity": null,
              "visibility": "external",
              "payable": false,
              "override": false,
              "modifier": [],
              "returns": [],
              "body": "{\n        int24 tick = getLowerUsableTick(tickToSellAt, key.tickSpacing);\n        uint256 positionId = getPositionId(key, tick, zeroForOne);\n\n        uint256 positionTokens = balanceOf(msg.sender, positionId);\n        if (positionTokens == 0) revert InvalidOrder();\n\n        pendingOrders[key.toId()][tick][zeroForOne] -= positionTokens;\n        claimTokensSupply[positionId] -= positionTokens;\n        _burn(msg.sender, positionId, positionTokens);\n\n        Currency token = zeroForOne ? key.currency0 : key.currency1;\n        token.transfer(msg.sender, positionTokens);\n    }",
              "access_control": [{ "method": "revert", "logic": "" }]
            },
            {
              "name": "redeem",
              "variable": [
                {
                  "name": "key",
                  "signature": "TakeProfitsHook:redeem",
                  "type": "PoolKey",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "tickToSellAt",
                  "signature": "TakeProfitsHook:redeem",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "zeroForOne",
                  "signature": "TakeProfitsHook:redeem",
                  "type": "bool",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "inputAmountToClaimFor",
                  "signature": "TakeProfitsHook:redeem",
                  "type": "uint256",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "parameters": [
                {
                  "name": "key",
                  "signature": "TakeProfitsHook:redeem",
                  "type": "PoolKey",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "tickToSellAt",
                  "signature": "TakeProfitsHook:redeem",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "zeroForOne",
                  "signature": "TakeProfitsHook:redeem",
                  "type": "bool",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "inputAmountToClaimFor",
                  "signature": "TakeProfitsHook:redeem",
                  "type": "uint256",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "purity": null,
              "visibility": "external",
              "payable": false,
              "override": false,
              "modifier": [],
              "returns": [],
              "body": "{\n        int24 tick = getLowerUsableTick(tickToSellAt, key.tickSpacing);\n        uint256 positionId = getPositionId(key, tick, zeroForOne);\n\n        if (claimableOutputTokens[positionId] == 0) revert NothingToClaim();\n\n        uint256 positionTokens = balanceOf(msg.sender, positionId);\n        if (positionTokens < inputAmountToClaimFor) revert NotEnoughToClaim();\n\n        uint256 totalClaimableForPosition = claimableOutputTokens[positionId];\n        uint256 totalInputAmountForPosition = claimTokensSupply[positionId];\n\n        // outputAmount = (inputAmountToClaimFor * totalClaimableForPosition) / (totalInputAmountForPosition)\n        uint256 outputAmount = inputAmountToClaimFor.mulDivDown(totalClaimableForPosition, totalInputAmountForPosition);\n\n        claimableOutputTokens[positionId] -= outputAmount;\n        claimTokensSupply[positionId] -= inputAmountToClaimFor;\n        _burn(msg.sender, positionId, inputAmountToClaimFor);\n\n        Currency token = zeroForOne ? key.currency1 : key.currency0;\n        token.transfer(msg.sender, outputAmount);\n    }",
              "access_control": [
                { "method": "revert", "logic": "" },
                { "method": "revert", "logic": "" }
              ]
            },
            {
              "name": "tryExecutingOrders",
              "variable": [
                {
                  "name": "key",
                  "signature": "TakeProfitsHook:tryExecutingOrders",
                  "type": "PoolKey",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "executeZeroForOne",
                  "signature": "TakeProfitsHook:tryExecutingOrders",
                  "type": "bool",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "tryMore",
                  "signature": "TakeProfitsHook:tryExecutingOrders",
                  "type": "bool",
                  "location": "memory",
                  "visibility": null,
                  "scope": "returns",
                  "mutability": "mutable"
                },
                {
                  "name": "newTick",
                  "signature": "TakeProfitsHook:tryExecutingOrders",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "returns",
                  "mutability": "mutable"
                }
              ],
              "parameters": [
                {
                  "name": "key",
                  "signature": "TakeProfitsHook:tryExecutingOrders",
                  "type": "PoolKey",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "executeZeroForOne",
                  "signature": "TakeProfitsHook:tryExecutingOrders",
                  "type": "bool",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "purity": null,
              "visibility": "internal",
              "payable": false,
              "override": false,
              "modifier": [],
              "returns": [
                {
                  "name": "tryMore",
                  "signature": "TakeProfitsHook:tryExecutingOrders",
                  "type": "bool",
                  "location": "memory",
                  "visibility": null,
                  "scope": "returns",
                  "mutability": "mutable"
                },
                {
                  "name": "newTick",
                  "signature": "TakeProfitsHook:tryExecutingOrders",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "returns",
                  "mutability": "mutable"
                }
              ],
              "body": "{\n        (, int24 currentTick,,) = poolManager.getSlot0(key.toId());\n        int24 lastTick = lastTicks[key.toId()];\n\n        if (currentTick > lastTick) {\n            for (int24 tick = lastTick; tick < currentTick; tick += key.tickSpacing) {\n                uint256 inputAmount = pendingOrders[key.toId()][tick][executeZeroForOne];\n                if (inputAmount > 0) {\n                    executeOrder(key, tick, executeZeroForOne, inputAmount);\n\n                    return (true, currentTick);\n                }\n            }\n        } else {\n            for (int24 tick = lastTick; tick > currentTick; tick -= key.tickSpacing) {\n                uint256 inputAmount = pendingOrders[key.toId()][tick][executeZeroForOne];\n                if (inputAmount > 0) {\n                    executeOrder(key, tick, executeZeroForOne, inputAmount);\n                    return (true, currentTick);\n                }\n            }\n        }\n\n        return (false, currentTick);\n    }",
              "access_control": []
            },
            {
              "name": "executeOrder",
              "variable": [
                {
                  "name": "key",
                  "signature": "TakeProfitsHook:executeOrder",
                  "type": "PoolKey",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "tick",
                  "signature": "TakeProfitsHook:executeOrder",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "zeroForOne",
                  "signature": "TakeProfitsHook:executeOrder",
                  "type": "bool",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "inputAmount",
                  "signature": "TakeProfitsHook:executeOrder",
                  "type": "uint256",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "parameters": [
                {
                  "name": "key",
                  "signature": "TakeProfitsHook:executeOrder",
                  "type": "PoolKey",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "tick",
                  "signature": "TakeProfitsHook:executeOrder",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "zeroForOne",
                  "signature": "TakeProfitsHook:executeOrder",
                  "type": "bool",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "inputAmount",
                  "signature": "TakeProfitsHook:executeOrder",
                  "type": "uint256",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "purity": null,
              "visibility": "internal",
              "payable": false,
              "override": false,
              "modifier": [],
              "returns": [],
              "body": "{\n        BalanceDelta delta = swapAndSettleBalances(\n            key,\n            IPoolManager.SwapParams({\n                zeroForOne: zeroForOne,\n                amountSpecified: -int256(inputAmount),\n                sqrtPriceLimitX96: zeroForOne ? TickMath.MIN_SQRT_PRICE + 1 : TickMath.MAX_SQRT_PRICE - 1\n            })\n        );\n\n        pendingOrders[key.toId()][tick][zeroForOne] -= inputAmount;\n        uint256 positionId = getPositionId(key, tick, zeroForOne);\n        uint256 outputAmount = zeroForOne ? uint256(int256(delta.amount1())) : uint256(int256(delta.amount0()));\n\n        claimableOutputTokens[positionId] += outputAmount;\n    }",
              "access_control": []
            },
            {
              "name": "swapAndSettleBalances",
              "variable": [
                {
                  "name": "key",
                  "signature": "TakeProfitsHook:swapAndSettleBalances",
                  "type": "PoolKey",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "params",
                  "signature": "TakeProfitsHook:swapAndSettleBalances",
                  "type": "IPoolManager.SwapParams",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "parameters": [
                {
                  "name": "key",
                  "signature": "TakeProfitsHook:swapAndSettleBalances",
                  "type": "PoolKey",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "params",
                  "signature": "TakeProfitsHook:swapAndSettleBalances",
                  "type": "IPoolManager.SwapParams",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "purity": null,
              "visibility": "internal",
              "payable": false,
              "override": false,
              "modifier": [],
              "returns": [],
              "body": "{\n        BalanceDelta delta = poolManager.swap(key, params, \"\");\n\n        if (params.zeroForOne) {\n            if (delta.amount0() < 0) {\n                _settle(key.currency0, uint128(-delta.amount0()));\n            }\n\n            if (delta.amount1() > 0) {\n                _take(key.currency1, uint128(delta.amount1()));\n            }\n        } else {\n            if (delta.amount1() < 0) {\n                _settle(key.currency1, uint128(-delta.amount1()));\n            }\n\n            if (delta.amount0() > 0) {\n                _take(key.currency0, uint128(delta.amount0()));\n            }\n        }\n\n        return delta;\n    }",
              "access_control": []
            },
            {
              "name": "_settle",
              "variable": [
                {
                  "name": "currency",
                  "signature": "TakeProfitsHook:_settle",
                  "type": "Currency",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "amount",
                  "signature": "TakeProfitsHook:_settle",
                  "type": "uint128",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "parameters": [
                {
                  "name": "currency",
                  "signature": "TakeProfitsHook:_settle",
                  "type": "Currency",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "amount",
                  "signature": "TakeProfitsHook:_settle",
                  "type": "uint128",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "purity": null,
              "visibility": "internal",
              "payable": false,
              "override": false,
              "modifier": [],
              "returns": [],
              "body": "{\n        poolManager.sync(currency);\n        currency.transfer(address(poolManager), amount);\n        poolManager.settle();\n    }",
              "access_control": []
            },
            {
              "name": "_take",
              "variable": [
                {
                  "name": "currency",
                  "signature": "TakeProfitsHook:_take",
                  "type": "Currency",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "amount",
                  "signature": "TakeProfitsHook:_take",
                  "type": "uint128",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "parameters": [
                {
                  "name": "currency",
                  "signature": "TakeProfitsHook:_take",
                  "type": "Currency",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "amount",
                  "signature": "TakeProfitsHook:_take",
                  "type": "uint128",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "purity": null,
              "visibility": "internal",
              "payable": false,
              "override": false,
              "modifier": [],
              "returns": [],
              "body": "{\n        poolManager.take(currency, address(this), amount);\n    }",
              "access_control": []
            },
            {
              "name": "getPositionId",
              "variable": [
                {
                  "name": "key",
                  "signature": "TakeProfitsHook:getPositionId",
                  "type": "PoolKey",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "tick",
                  "signature": "TakeProfitsHook:getPositionId",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "zeroForOne",
                  "signature": "TakeProfitsHook:getPositionId",
                  "type": "bool",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "parameters": [
                {
                  "name": "key",
                  "signature": "TakeProfitsHook:getPositionId",
                  "type": "PoolKey",
                  "location": "calldata",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "immutable"
                },
                {
                  "name": "tick",
                  "signature": "TakeProfitsHook:getPositionId",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "zeroForOne",
                  "signature": "TakeProfitsHook:getPositionId",
                  "type": "bool",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "purity": "pure",
              "visibility": "public",
              "payable": false,
              "override": false,
              "modifier": [],
              "returns": [],
              "body": "{\n        return uint256(keccak256(abi.encode(key.toId(), tick, zeroForOne)));\n    }",
              "access_control": []
            },
            {
              "name": "getLowerUsableTick",
              "variable": [
                {
                  "name": "tick",
                  "signature": "TakeProfitsHook:getLowerUsableTick",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "tickSpacing",
                  "signature": "TakeProfitsHook:getLowerUsableTick",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "parameters": [
                {
                  "name": "tick",
                  "signature": "TakeProfitsHook:getLowerUsableTick",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                },
                {
                  "name": "tickSpacing",
                  "signature": "TakeProfitsHook:getLowerUsableTick",
                  "type": "int24",
                  "location": "memory",
                  "visibility": null,
                  "scope": "args",
                  "mutability": "mutable"
                }
              ],
              "purity": "pure",
              "visibility": "private",
              "payable": false,
              "override": false,
              "modifier": [],
              "returns": [],
              "body": "{\n        int24 intervals = tick / tickSpacing;\n\n        if (tick < 0 && tick % tickSpacing != 0) intervals--;\n\n        return intervals * tickSpacing;\n    }\n}",
              "access_control": []
            }
          ]
        }
      },
      "threats": [
        {
          "detector": "Using Slot0 directly to return price data as an oracle",
          "data": {
            "description": "Using Slot0 directly to return price data as an oracle, can be vulnerable at price oracle manipulation",
            "impact": "low"
          }
        }
      ]
    },
    "slither": {
      "detector": {
        "success": true,
        "error": null,
        "detector": "['encode-packed-collision', 'shadowing-state', 'uninitialized-state', 'controlled-delegatecall', 'delegatecall-loop', 'msg-value-loop', 'reentrancy-eth', 'unchecked-transfer', 'shadowing-abstract', 'divide-before-multiply']",
        "data": [
          {
            "description": "TakeProfitsHook.placeOrder(PoolKey,int24,bool,uint256) (../../engine/gamza-static/code/unichain/src/TakeProfitsHook.sol#97-112) ignores return value by IERC20(sellToken).transferFrom(msg.sender,address(this),inputAmount) (../../engine/gamza-static/code/unichain/src/TakeProfitsHook.sol#109)\n",
            "markdown": "[TakeProfitsHook.placeOrder(PoolKey,int24,bool,uint256)](../../engine/gamza-static/code/unichain/src/TakeProfitsHook.sol#L97-L112) ignores return value by [IERC20(sellToken).transferFrom(msg.sender,address(this),inputAmount)](../../engine/gamza-static/code/unichain/src/TakeProfitsHook.sol#L109)\n",
            "check": "unchecked-transfer",
            "impact": "High",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#83)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L83)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#87)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L87)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#85)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0xf3392b0822b70005940c7a398e4b70f3) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L85)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0xfff97272373d413259a46990580e213a) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#76)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0xfff97272373d413259a46990580e213a) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L76)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#86)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L86)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "FixedPointMathLib.rpow(uint256,uint256,uint256) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/solmate/src/utils/FixedPointMathLib.sol#59-134) performs a multiplication on the result of a division:\n\t- x = xxRound_rpow_asm_0 / scalar (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/solmate/src/utils/FixedPointMathLib.sol#109)\n\t- zx_rpow_asm_0 = z * x (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/solmate/src/utils/FixedPointMathLib.sol#114)\n",
            "markdown": "[FixedPointMathLib.rpow(uint256,uint256,uint256)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/solmate/src/utils/FixedPointMathLib.sol#L59-L134) performs a multiplication on the result of a division:\n\t- [x = xxRound_rpow_asm_0 / scalar](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/solmate/src/utils/FixedPointMathLib.sol#L109)\n\t- [zx_rpow_asm_0 = z * x](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/solmate/src/utils/FixedPointMathLib.sol#L114)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#89)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L89)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#88)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L88)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TakeProfitsHook.getLowerUsableTick(int24,int24) (../../engine/gamza-static/code/unichain/src/TakeProfitsHook.sol#241-247) performs a multiplication on the result of a division:\n\t- intervals = tick / tickSpacing (../../engine/gamza-static/code/unichain/src/TakeProfitsHook.sol#242)\n\t- intervals * tickSpacing (../../engine/gamza-static/code/unichain/src/TakeProfitsHook.sol#246)\n",
            "markdown": "[TakeProfitsHook.getLowerUsableTick(int24,int24)](../../engine/gamza-static/code/unichain/src/TakeProfitsHook.sol#L241-L247) performs a multiplication on the result of a division:\n\t- [intervals = tick / tickSpacing](../../engine/gamza-static/code/unichain/src/TakeProfitsHook.sol#L242)\n\t- [intervals * tickSpacing](../../engine/gamza-static/code/unichain/src/TakeProfitsHook.sol#L246)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "Math.mulDiv(uint256,uint256,uint256) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#124-203) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#170)\n\t- inverse *= 2 - denominator * inverse (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#194)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L124-L203) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L170)\n\t- [inverse *= 2 - denominator * inverse](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L194)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "Math.mulDiv(uint256,uint256,uint256) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#124-203) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#170)\n\t- inverse *= 2 - denominator * inverse (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#191)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L124-L203) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L170)\n\t- [inverse *= 2 - denominator * inverse](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L191)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "FullMath.mulDiv(uint256,uint256,uint256) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#14-102) performs a multiplication on the result of a division:\n\t- prod0 = prod0 / twos (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#67)\n\t- result = prod0 * inv (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#99)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L14-L102) performs a multiplication on the result of a division:\n\t- [prod0 = prod0 / twos](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L67)\n\t- [result = prod0 * inv](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L99)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0x2216e584f5fa1ea926041bedfe98) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#93)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0x2216e584f5fa1ea926041bedfe98) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L93)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "Math.mulDiv(uint256,uint256,uint256) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#124-203) performs a multiplication on the result of a division:\n\t- prod0 = prod0 / twos (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#173)\n\t- result = prod0 * inverse (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#200)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L124-L203) performs a multiplication on the result of a division:\n\t- [prod0 = prod0 / twos](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L173)\n\t- [result = prod0 * inverse](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L200)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.maxUsableTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#36-40) performs a multiplication on the result of a division:\n\t- (MAX_TICK / tickSpacing) * tickSpacing (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#38)\n",
            "markdown": "[TickMath.maxUsableTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L36-L40) performs a multiplication on the result of a division:\n\t- [(MAX_TICK / tickSpacing) * tickSpacing](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L38)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0xf987a7253ac413176f2b074cf7815e54) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#84)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0xf987a7253ac413176f2b074cf7815e54) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L84)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "FullMath.mulDiv(uint256,uint256,uint256) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#14-102) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#62)\n\t- inv *= 2 - denominator * inv (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#86)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L14-L102) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L62)\n\t- [inv *= 2 - denominator * inv](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L86)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "FullMath.mulDiv(uint256,uint256,uint256) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#14-102) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#62)\n\t- inv *= 2 - denominator * inv (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#87)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L14-L102) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L62)\n\t- [inv *= 2 - denominator * inv](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L87)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "FullMath.mulDiv(uint256,uint256,uint256) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#14-102) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#62)\n\t- inv = (3 * denominator) ^ 2 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#82)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L14-L102) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L62)\n\t- [inv = (3 * denominator) ^ 2](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L82)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#82)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0xfe5dee046a99a2a811c461f1969c3053) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L82)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0x5d6af8dedb81196699c329225ee604) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#92)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0x5d6af8dedb81196699c329225ee604) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L92)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#77)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L77)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "Math.mulDiv(uint256,uint256,uint256) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#124-203) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#170)\n\t- inverse *= 2 - denominator * inverse (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#189)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L124-L203) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L170)\n\t- [inverse *= 2 - denominator * inverse](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L189)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0x31be135f97d08fd981231505542fcfa6) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#90)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0x31be135f97d08fd981231505542fcfa6) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L90)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "Math.mulDiv(uint256,uint256,uint256) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#124-203) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#170)\n\t- inverse *= 2 - denominator * inverse (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#193)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L124-L203) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L170)\n\t- [inverse *= 2 - denominator * inverse](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L193)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#78)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L78)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0xff2ea16466c96a3843ec78b326b52861) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#81)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0xff2ea16466c96a3843ec78b326b52861) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L81)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0xff973b41fa98c081472e6896dfb254c0) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#80)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0xff973b41fa98c081472e6896dfb254c0) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L80)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "Math.mulDiv(uint256,uint256,uint256) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#124-203) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#170)\n\t- inverse *= 2 - denominator * inverse (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#190)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L124-L203) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L170)\n\t- [inverse *= 2 - denominator * inverse](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L190)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "FullMath.mulDiv(uint256,uint256,uint256) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#14-102) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#62)\n\t- inv *= 2 - denominator * inv (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#90)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L14-L102) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L62)\n\t- [inv *= 2 - denominator * inv](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L90)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "Math.mulDiv(uint256,uint256,uint256) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#124-203) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#170)\n\t- inverse = (3 * denominator) ^ 2 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#185)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L124-L203) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L170)\n\t- [inverse = (3 * denominator) ^ 2](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L185)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "FullMath.mulDiv(uint256,uint256,uint256) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#14-102) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#62)\n\t- inv *= 2 - denominator * inv (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#88)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L14-L102) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L62)\n\t- [inv *= 2 - denominator * inv](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L88)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "Math.mulDiv(uint256,uint256,uint256) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#124-203) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#170)\n\t- inverse *= 2 - denominator * inverse (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#192)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L124-L203) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L170)\n\t- [inverse *= 2 - denominator * inverse](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol#L192)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#91)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L91)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "CustomRevert.bubbleUpAndRevertWith(bytes4) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/CustomRevert.sol#79-94) performs a multiplication on the result of a division:\n\t- encodedSize_bubbleUpAndRevertWith_asm_0 = 0x44 + size_bubbleUpAndRevertWith_asm_0 + 31 / 32 * 32 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/CustomRevert.sol#91)\n",
            "markdown": "[CustomRevert.bubbleUpAndRevertWith(bytes4)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/CustomRevert.sol#L79-L94) performs a multiplication on the result of a division:\n\t- [encodedSize_bubbleUpAndRevertWith_asm_0 = 0x44 + size_bubbleUpAndRevertWith_asm_0 + 31 / 32 * 32](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/CustomRevert.sol#L91)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "FullMath.mulDiv(uint256,uint256,uint256) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#14-102) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#62)\n\t- inv *= 2 - denominator * inv (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#91)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L14-L102) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L62)\n\t- [inv *= 2 - denominator * inv](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L91)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.minUsableTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#43-47) performs a multiplication on the result of a division:\n\t- (MIN_TICK / tickSpacing) * tickSpacing (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#45)\n",
            "markdown": "[TickMath.minUsableTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L43-L47) performs a multiplication on the result of a division:\n\t- [(MIN_TICK / tickSpacing) * tickSpacing](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L45)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0x48a170391f7dc42444e8fa2) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#94)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0x48a170391f7dc42444e8fa2) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L94)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "FullMath.mulDiv(uint256,uint256,uint256) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#14-102) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#62)\n\t- inv *= 2 - denominator * inv (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#89)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L14-L102) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L62)\n\t- [inv *= 2 - denominator * inv](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol#L89)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          },
          {
            "description": "TickMath.getSqrtPriceAtTick(int24) (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#54-108) performs a multiplication on the result of a division:\n\t- price = (price * 0xffcb9843d60f6159c9db58835c926644) >> 128 (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#79)\n\t- price = ~ 0 / price (../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#98)\n",
            "markdown": "[TickMath.getSqrtPriceAtTick(int24)](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L54-L108) performs a multiplication on the result of a division:\n\t- [price = (price * 0xffcb9843d60f6159c9db58835c926644) >> 128](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L79)\n\t- [price = ~ 0 / price](../../engine/gamza-static/code/unichain/lib/v4-periphery/lib/v4-core/src/libraries/TickMath.sol#L98)\n",
            "check": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium"
          }
        ]
      },
      "printer": {
        "contract": "TakeProfitsHook",
        "success": true,
        "error": null,
        "data": [
          {
            "printer": "require",
            "fields_names": ["Function", "require or assert"],
            "result": [
              { "Function": "constructor", "require or assert": "" },
              { "Function": "supportsInterface", "require or assert": "" },
              { "Function": "uri", "require or assert": "" },
              { "Function": "balanceOf", "require or assert": "" },
              { "Function": "balanceOfBatch", "require or assert": "" },
              { "Function": "setApprovalForAll", "require or assert": "" },
              { "Function": "isApprovedForAll", "require or assert": "" },
              { "Function": "safeTransferFrom", "require or assert": "" },
              { "Function": "safeBatchTransferFrom", "require or assert": "" },
              { "Function": "_update", "require or assert": "" },
              {
                "Function": "_updateWithAcceptanceCheck",
                "require or assert": ""
              },
              { "Function": "_safeTransferFrom", "require or assert": "" },
              { "Function": "_safeBatchTransferFrom", "require or assert": "" },
              { "Function": "_setURI", "require or assert": "" },
              { "Function": "_mint", "require or assert": "" },
              { "Function": "_mintBatch", "require or assert": "" },
              { "Function": "_burn", "require or assert": "" },
              { "Function": "_burnBatch", "require or assert": "" },
              { "Function": "_setApprovalForAll", "require or assert": "" },
              {
                "Function": "_doSafeTransferAcceptanceCheck",
                "require or assert": ""
              },
              {
                "Function": "_doSafeBatchTransferAcceptanceCheck",
                "require or assert": ""
              },
              { "Function": "_asSingletonArrays", "require or assert": "" },
              { "Function": "uri", "require or assert": "" },
              { "Function": "balanceOf", "require or assert": "" },
              { "Function": "balanceOfBatch", "require or assert": "" },
              { "Function": "setApprovalForAll", "require or assert": "" },
              { "Function": "isApprovedForAll", "require or assert": "" },
              { "Function": "safeTransferFrom", "require or assert": "" },
              { "Function": "safeBatchTransferFrom", "require or assert": "" },
              { "Function": "supportsInterface", "require or assert": "" },
              { "Function": "supportsInterface", "require or assert": "" },
              { "Function": "_msgSender", "require or assert": "" },
              { "Function": "_msgData", "require or assert": "" },
              { "Function": "_contextSuffixLength", "require or assert": "" },
              { "Function": "constructor", "require or assert": "" },
              { "Function": "getHookPermissions", "require or assert": "" },
              { "Function": "validateHookAddress", "require or assert": "" },
              { "Function": "_unlockCallback", "require or assert": "" },
              { "Function": "beforeInitialize", "require or assert": "" },
              { "Function": "afterInitialize", "require or assert": "" },
              { "Function": "beforeAddLiquidity", "require or assert": "" },
              { "Function": "beforeRemoveLiquidity", "require or assert": "" },
              { "Function": "afterAddLiquidity", "require or assert": "" },
              { "Function": "afterRemoveLiquidity", "require or assert": "" },
              { "Function": "beforeSwap", "require or assert": "" },
              { "Function": "afterSwap", "require or assert": "" },
              { "Function": "beforeDonate", "require or assert": "" },
              { "Function": "afterDonate", "require or assert": "" },
              { "Function": "constructor", "require or assert": "" },
              { "Function": "unlockCallback", "require or assert": "" },
              { "Function": "_unlockCallback", "require or assert": "" },
              { "Function": "unlockCallback", "require or assert": "" },
              { "Function": "constructor", "require or assert": "" },
              { "Function": "beforeInitialize", "require or assert": "" },
              { "Function": "afterInitialize", "require or assert": "" },
              { "Function": "beforeAddLiquidity", "require or assert": "" },
              { "Function": "afterAddLiquidity", "require or assert": "" },
              { "Function": "beforeRemoveLiquidity", "require or assert": "" },
              { "Function": "afterRemoveLiquidity", "require or assert": "" },
              { "Function": "beforeSwap", "require or assert": "" },
              { "Function": "afterSwap", "require or assert": "" },
              { "Function": "beforeDonate", "require or assert": "" },
              { "Function": "afterDonate", "require or assert": "" },
              { "Function": "constructor", "require or assert": "" },
              { "Function": "getHookPermissions", "require or assert": "" },
              { "Function": "afterInitialize", "require or assert": "" },
              { "Function": "afterSwap", "require or assert": "" },
              { "Function": "placeOrder", "require or assert": "" },
              { "Function": "cancelOrder", "require or assert": "" },
              { "Function": "redeem", "require or assert": "" },
              { "Function": "tryExecutingOrders", "require or assert": "" },
              { "Function": "executeOrder", "require or assert": "" },
              { "Function": "swapAndSettleBalances", "require or assert": "" },
              { "Function": "_settle", "require or assert": "" },
              { "Function": "_take", "require or assert": "" },
              { "Function": "getPositionId", "require or assert": "" },
              { "Function": "getLowerUsableTick", "require or assert": "" }
            ]
          },
          {
            "printer": "modifiers",
            "fields_names": ["Function", "Modifiers"],
            "result": [
              { "Function": "constructor", "Modifiers": [] },
              { "Function": "supportsInterface", "Modifiers": [] },
              { "Function": "uri", "Modifiers": [] },
              { "Function": "balanceOf", "Modifiers": [] },
              { "Function": "balanceOfBatch", "Modifiers": [] },
              { "Function": "setApprovalForAll", "Modifiers": [] },
              { "Function": "isApprovedForAll", "Modifiers": [] },
              { "Function": "safeTransferFrom", "Modifiers": [] },
              { "Function": "safeBatchTransferFrom", "Modifiers": [] },
              { "Function": "_update", "Modifiers": [] },
              { "Function": "_updateWithAcceptanceCheck", "Modifiers": [] },
              { "Function": "_safeTransferFrom", "Modifiers": [] },
              { "Function": "_safeBatchTransferFrom", "Modifiers": [] },
              { "Function": "_setURI", "Modifiers": [] },
              { "Function": "_mint", "Modifiers": [] },
              { "Function": "_mintBatch", "Modifiers": [] },
              { "Function": "_burn", "Modifiers": [] },
              { "Function": "_burnBatch", "Modifiers": [] },
              { "Function": "_setApprovalForAll", "Modifiers": [] },
              { "Function": "_doSafeTransferAcceptanceCheck", "Modifiers": [] },
              {
                "Function": "_doSafeBatchTransferAcceptanceCheck",
                "Modifiers": []
              },
              { "Function": "_asSingletonArrays", "Modifiers": [] },
              { "Function": "uri", "Modifiers": [] },
              { "Function": "balanceOf", "Modifiers": [] },
              { "Function": "balanceOfBatch", "Modifiers": [] },
              { "Function": "setApprovalForAll", "Modifiers": [] },
              { "Function": "isApprovedForAll", "Modifiers": [] },
              { "Function": "safeTransferFrom", "Modifiers": [] },
              { "Function": "safeBatchTransferFrom", "Modifiers": [] },
              { "Function": "supportsInterface", "Modifiers": [] },
              { "Function": "supportsInterface", "Modifiers": [] },
              { "Function": "_msgSender", "Modifiers": [] },
              { "Function": "_msgData", "Modifiers": [] },
              { "Function": "_contextSuffixLength", "Modifiers": [] },
              { "Function": "constructor", "Modifiers": [] },
              { "Function": "getHookPermissions", "Modifiers": [] },
              { "Function": "validateHookAddress", "Modifiers": [] },
              { "Function": "_unlockCallback", "Modifiers": [] },
              { "Function": "beforeInitialize", "Modifiers": [] },
              { "Function": "afterInitialize", "Modifiers": [] },
              { "Function": "beforeAddLiquidity", "Modifiers": [] },
              { "Function": "beforeRemoveLiquidity", "Modifiers": [] },
              { "Function": "afterAddLiquidity", "Modifiers": [] },
              { "Function": "afterRemoveLiquidity", "Modifiers": [] },
              { "Function": "beforeSwap", "Modifiers": [] },
              { "Function": "afterSwap", "Modifiers": [] },
              { "Function": "beforeDonate", "Modifiers": [] },
              { "Function": "afterDonate", "Modifiers": [] },
              { "Function": "constructor", "Modifiers": [] },
              {
                "Function": "unlockCallback",
                "Modifiers": ["onlyByPoolManager"]
              },
              { "Function": "_unlockCallback", "Modifiers": [] },
              { "Function": "unlockCallback", "Modifiers": [] },
              { "Function": "constructor", "Modifiers": [] },
              { "Function": "beforeInitialize", "Modifiers": [] },
              { "Function": "afterInitialize", "Modifiers": [] },
              { "Function": "beforeAddLiquidity", "Modifiers": [] },
              { "Function": "afterAddLiquidity", "Modifiers": [] },
              { "Function": "beforeRemoveLiquidity", "Modifiers": [] },
              { "Function": "afterRemoveLiquidity", "Modifiers": [] },
              { "Function": "beforeSwap", "Modifiers": [] },
              { "Function": "afterSwap", "Modifiers": [] },
              { "Function": "beforeDonate", "Modifiers": [] },
              { "Function": "afterDonate", "Modifiers": [] },
              { "Function": "constructor", "Modifiers": [] },
              { "Function": "getHookPermissions", "Modifiers": [] },
              {
                "Function": "afterInitialize",
                "Modifiers": ["onlyByPoolManager"]
              },
              { "Function": "afterSwap", "Modifiers": ["onlyByPoolManager"] },
              { "Function": "placeOrder", "Modifiers": [] },
              { "Function": "cancelOrder", "Modifiers": [] },
              { "Function": "redeem", "Modifiers": [] },
              { "Function": "tryExecutingOrders", "Modifiers": [] },
              { "Function": "executeOrder", "Modifiers": [] },
              { "Function": "swapAndSettleBalances", "Modifiers": [] },
              { "Function": "_settle", "Modifiers": [] },
              { "Function": "_take", "Modifiers": [] },
              { "Function": "getPositionId", "Modifiers": [] },
              { "Function": "getLowerUsableTick", "Modifiers": [] }
            ]
          },
          {
            "printer": "vars-and-auth",
            "fields_names": [
              "Function",
              "State variables written",
              "Conditions on msg.sender"
            ],
            "result": [
              {
                "Function": "constructor",
                "State variables written": "['_uri']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "supportsInterface",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "uri",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "balanceOf",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "balanceOfBatch",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "setApprovalForAll",
                "State variables written": "['_operatorApprovals']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "isApprovedForAll",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "safeTransferFrom",
                "State variables written": "['_balances']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "safeBatchTransferFrom",
                "State variables written": "['_balances']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_update",
                "State variables written": "['_balances']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_updateWithAcceptanceCheck",
                "State variables written": "['_balances']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_safeTransferFrom",
                "State variables written": "['_balances']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_safeBatchTransferFrom",
                "State variables written": "['_balances']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_setURI",
                "State variables written": "['_uri']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_mint",
                "State variables written": "['_balances']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_mintBatch",
                "State variables written": "['_balances']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_burn",
                "State variables written": "['_balances']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_burnBatch",
                "State variables written": "['_balances']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_setApprovalForAll",
                "State variables written": "['_operatorApprovals']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_doSafeTransferAcceptanceCheck",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_doSafeBatchTransferAcceptanceCheck",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_asSingletonArrays",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "uri",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "balanceOf",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "balanceOfBatch",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "setApprovalForAll",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "isApprovedForAll",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "safeTransferFrom",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "safeBatchTransferFrom",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "supportsInterface",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "supportsInterface",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_msgSender",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_msgData",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_contextSuffixLength",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "constructor",
                "State variables written": "['poolManager']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "getHookPermissions",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "validateHookAddress",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_unlockCallback",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "beforeInitialize",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "afterInitialize",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "beforeAddLiquidity",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "beforeRemoveLiquidity",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "afterAddLiquidity",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "afterRemoveLiquidity",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "beforeSwap",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "afterSwap",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "beforeDonate",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "afterDonate",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "constructor",
                "State variables written": "['poolManager']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "unlockCallback",
                "State variables written": "[]",
                "Conditions on msg.sender": "['msg.sender != address(poolManager)', 'msg.sender != address(poolManager)']"
              },
              {
                "Function": "_unlockCallback",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "unlockCallback",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "constructor",
                "State variables written": "['poolManager']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "beforeInitialize",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "afterInitialize",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "beforeAddLiquidity",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "afterAddLiquidity",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "beforeRemoveLiquidity",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "afterRemoveLiquidity",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "beforeSwap",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "afterSwap",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "beforeDonate",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "afterDonate",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "constructor",
                "State variables written": "['_uri', 'poolManager']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "getHookPermissions",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "afterInitialize",
                "State variables written": "['lastTicks']",
                "Conditions on msg.sender": "['msg.sender != address(poolManager)', 'msg.sender != address(poolManager)']"
              },
              {
                "Function": "afterSwap",
                "State variables written": "['claimableOutputTokens', 'lastTicks', 'pendingOrders']",
                "Conditions on msg.sender": "['msg.sender != address(poolManager)', 'msg.sender != address(poolManager)']"
              },
              {
                "Function": "placeOrder",
                "State variables written": "['_balances', 'claimTokensSupply', 'pendingOrders']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "cancelOrder",
                "State variables written": "['_balances', 'claimTokensSupply', 'pendingOrders']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "redeem",
                "State variables written": "['_balances', 'claimTokensSupply', 'claimableOutputTokens']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "tryExecutingOrders",
                "State variables written": "['claimableOutputTokens', 'pendingOrders']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "executeOrder",
                "State variables written": "['claimableOutputTokens', 'pendingOrders']",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "swapAndSettleBalances",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_settle",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "_take",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "getPositionId",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              },
              {
                "Function": "getLowerUsableTick",
                "State variables written": "[]",
                "Conditions on msg.sender": "[]"
              }
            ]
          }
        ]
      }
    },
    "mode": 3,
    "idx": 0,
    "poolKey": {
      "hooks": "0x7d61d057dD982b8B0A05a5871C7d40f8b96dd040",
      "currency0": "0x0197481B0F5237eF312a78528e79667D8b33Dcff",
      "currency1": "0xA56569Bd93dc4b9afCc871e251017dB0543920d4",
      "fee": 0,
      "tickSpacing": 60
    }
  }
}
